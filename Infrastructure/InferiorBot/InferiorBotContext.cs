// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Infrastructure.InferiorBot;

public partial class InferiorBotContext : DbContext
{
    public InferiorBotContext(DbContextOptions<InferiorBotContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ConvertedUrl> ConvertedUrls { get; set; }

    public virtual DbSet<Guild> Guilds { get; set; }

    public virtual DbSet<Job> Jobs { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserStat> UserStats { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasPostgresExtension("uuid-ossp");

        modelBuilder.Entity<ConvertedUrl>(entity =>
        {
            entity.HasKey(e => new { e.GuildId, e.ChannelId, e.MessageId }).HasName("converted_urls_pkey1");

            entity.ToTable("converted_urls");

            entity.Property(e => e.GuildId)
                .HasPrecision(19)
                .HasColumnName("guild_id");
            entity.Property(e => e.ChannelId)
                .HasPrecision(19)
                .HasColumnName("channel_id");
            entity.Property(e => e.MessageId)
                .HasPrecision(19)
                .HasColumnName("message_id");
            entity.Property(e => e.DatePosted)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_posted");
            entity.Property(e => e.OriginalUrl)
                .IsRequired()
                .HasColumnName("original_url");
            entity.Property(e => e.UserId)
                .HasPrecision(19)
                .HasColumnName("user_id");

            entity.HasOne(d => d.Guild).WithMany(p => p.ConvertedUrls)
                .HasForeignKey(d => d.GuildId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("converted_urls_guild_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.ConvertedUrls)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("converted_urls_user_id_fkey1");
        });

        modelBuilder.Entity<Guild>(entity =>
        {
            entity.HasKey(e => e.GuildId).HasName("guilds_pkey");

            entity.ToTable("guilds");

            entity.HasIndex(e => e.GuildId, "guilds_guild_id_key").IsUnique();

            entity.Property(e => e.GuildId)
                .HasPrecision(19)
                .HasColumnName("guild_id");
            entity.Property(e => e.BotChannels)
                .IsRequired()
                .HasDefaultValueSql("ARRAY[]::numeric[]")
                .HasColumnType("numeric(19,0)[]")
                .HasColumnName("bot_channels");
            entity.Property(e => e.ConvertUrls)
                .HasDefaultValue(false)
                .HasColumnName("convert_urls");
            entity.Property(e => e.DjRoles)
                .IsRequired()
                .HasDefaultValueSql("ARRAY[]::numeric[]")
                .HasColumnType("numeric(19,0)[]")
                .HasColumnName("dj_roles");
        });

        modelBuilder.Entity<Job>(entity =>
        {
            entity.HasKey(e => e.JobId).HasName("jobs_pkey");

            entity.ToTable("jobs");

            entity.Property(e => e.JobId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("job_id");
            entity.Property(e => e.Cooldown).HasColumnName("cooldown");
            entity.Property(e => e.JobTitle)
                .IsRequired()
                .HasColumnName("job_title");
            entity.Property(e => e.PayMax)
                .HasColumnType("money")
                .HasColumnName("pay_max");
            entity.Property(e => e.PayMin)
                .HasColumnType("money")
                .HasColumnName("pay_min");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.RiskLevel).HasColumnName("risk_level");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("users_pkey");

            entity.ToTable("users");

            entity.HasIndex(e => e.UserId, "users_user_id_key").IsUnique();

            entity.Property(e => e.UserId)
                .HasPrecision(19)
                .HasColumnName("user_id");
            entity.Property(e => e.Balance)
                .HasDefaultValueSql("100")
                .HasColumnType("money")
                .HasColumnName("balance");
            entity.Property(e => e.Banned)
                .HasDefaultValue(false)
                .HasColumnName("banned");
            entity.Property(e => e.DailyCooldown)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("daily_cooldown");
            entity.Property(e => e.JobId).HasColumnName("job_id");
            entity.Property(e => e.Level)
                .HasPrecision(4)
                .HasDefaultValueSql("1")
                .HasColumnName("level");
            entity.Property(e => e.WorkCooldown)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("work_cooldown");
            entity.Property(e => e.Xp)
                .HasDefaultValue(0)
                .HasColumnName("xp");
        });

        modelBuilder.Entity<UserStat>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("user_stats_pkey");

            entity.ToTable("user_stats");

            entity.Property(e => e.UserId)
                .HasPrecision(19)
                .HasColumnName("user_id");
            entity.Property(e => e.AllTimeLost)
                .HasColumnType("money")
                .HasColumnName("all_time_lost");
            entity.Property(e => e.AllTimeWon)
                .HasColumnType("money")
                .HasColumnName("all_time_won");
            entity.Property(e => e.BiggestLoss)
                .HasColumnType("money")
                .HasColumnName("biggest_loss");
            entity.Property(e => e.BiggestWin)
                .HasColumnType("money")
                .HasColumnName("biggest_win");
            entity.Property(e => e.CoinFlipLosses)
                .HasPrecision(10)
                .HasColumnName("coin_flip_losses");
            entity.Property(e => e.CoinFlipWins)
                .HasPrecision(10)
                .HasColumnName("coin_flip_wins");
            entity.Property(e => e.DailyCount)
                .HasPrecision(10)
                .HasColumnName("daily_count");
            entity.Property(e => e.DailyStreak)
                .HasPrecision(10)
                .HasColumnName("daily_streak");
            entity.Property(e => e.WorkCount)
                .HasPrecision(10)
                .HasColumnName("work_count");

            entity.HasOne(d => d.User).WithOne(p => p.UserStat)
                .HasForeignKey<UserStat>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_stats_user_id_fkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}