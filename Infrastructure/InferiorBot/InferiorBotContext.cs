// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Infrastructure.InferiorBot;

public partial class InferiorBotContext : DbContext
{
    public InferiorBotContext(DbContextOptions<InferiorBotContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ConvertedUrl> ConvertedUrls { get; set; }

    public virtual DbSet<Game> Games { get; set; }

    public virtual DbSet<GameType> GameTypes { get; set; }

    public virtual DbSet<GameUser> GameUsers { get; set; }

    public virtual DbSet<Guild> Guilds { get; set; }

    public virtual DbSet<Setting> Settings { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserCooldown> UserCooldowns { get; set; }

    public virtual DbSet<UserStat> UserStats { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasPostgresExtension("pg_uuidv7");

        modelBuilder.Entity<ConvertedUrl>(entity =>
        {
            entity.HasKey(e => new { e.GuildId, e.ChannelId, e.MessageId }).HasName("converted_urls_pkey");

            entity.ToTable("converted_urls");

            entity.Property(e => e.GuildId).HasColumnName("guild_id");
            entity.Property(e => e.ChannelId).HasColumnName("channel_id");
            entity.Property(e => e.MessageId).HasColumnName("message_id");
            entity.Property(e => e.DatePosted)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_posted");
            entity.Property(e => e.OriginalUrl)
                .IsRequired()
                .HasColumnName("original_url");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasColumnName("user_id");

            entity.HasOne(d => d.Guild).WithMany(p => p.ConvertedUrls)
                .HasForeignKey(d => d.GuildId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("converted_urls_guild_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.ConvertedUrls)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("converted_urls_user_id_fkey");
        });

        modelBuilder.Entity<Game>(entity =>
        {
            entity.HasKey(e => e.GameId).HasName("games_pkey");

            entity.ToTable("games");

            entity.Property(e => e.GameId)
                .HasDefaultValueSql("uuid_generate_v7()")
                .HasColumnName("game_id");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_date");
            entity.Property(e => e.GameData)
                .IsRequired()
                .HasColumnType("json")
                .HasColumnName("game_data");
            entity.Property(e => e.GameTypeId).HasColumnName("game_type_id");
            entity.Property(e => e.GuildId).HasColumnName("guild_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.GameType).WithMany(p => p.Games)
                .HasForeignKey(d => d.GameTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("games_game_type_id_fkey");

            entity.HasOne(d => d.Guild).WithMany(p => p.Games)
                .HasForeignKey(d => d.GuildId)
                .HasConstraintName("games_guild_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Games)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("games_user_id_fkey");
        });

        modelBuilder.Entity<GameType>(entity =>
        {
            entity.HasKey(e => e.GameTypeId).HasName("game_types_pkey");

            entity.ToTable("game_types");

            entity.HasIndex(e => e.Name, "game_types_name_key").IsUnique();

            entity.Property(e => e.GameTypeId)
                .HasDefaultValueSql("uuid_generate_v7()")
                .HasColumnName("game_type_id");
            entity.Property(e => e.Enabled)
                .HasDefaultValue(false)
                .HasColumnName("enabled");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasColumnName("name");
        });

        modelBuilder.Entity<GameUser>(entity =>
        {
            entity.HasKey(e => new { e.GameId, e.UserId }).HasName("game_users_pkey");

            entity.ToTable("game_users");

            entity.Property(e => e.GameId).HasColumnName("game_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UserData)
                .HasColumnType("json")
                .HasColumnName("user_data");

            entity.HasOne(d => d.Game).WithMany(p => p.GameUsers)
                .HasForeignKey(d => d.GameId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("game_users_game_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.GameUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("game_users_user_id_fkey");
        });

        modelBuilder.Entity<Guild>(entity =>
        {
            entity.HasKey(e => e.GuildId).HasName("guilds_pkey");

            entity.ToTable("guilds");

            entity.Property(e => e.GuildId).HasColumnName("guild_id");
            entity.Property(e => e.BotChannels)
                .IsRequired()
                .HasDefaultValueSql("ARRAY[]::text[]")
                .HasColumnName("bot_channels");
            entity.Property(e => e.ConvertUrls)
                .HasDefaultValue(false)
                .HasColumnName("convert_urls");
            entity.Property(e => e.DjRoles)
                .IsRequired()
                .HasDefaultValueSql("ARRAY[]::text[]")
                .HasColumnName("dj_roles");
        });

        modelBuilder.Entity<Setting>(entity =>
        {
            entity.HasKey(e => e.SettingId).HasName("settings_pkey");

            entity.ToTable("settings");

            entity.Property(e => e.SettingId)
                .HasDefaultValueSql("uuid_generate_v7()")
                .HasColumnName("setting_id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasColumnName("name");
            entity.Property(e => e.Value)
                .IsRequired()
                .HasColumnName("value");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("users_pkey");

            entity.ToTable("users");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Balance)
                .HasDefaultValueSql("100")
                .HasColumnType("money")
                .HasColumnName("balance");
            entity.Property(e => e.Banned)
                .HasDefaultValue(false)
                .HasColumnName("banned");
        });

        modelBuilder.Entity<UserCooldown>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("user_cooldowns_pkey");

            entity.ToTable("user_cooldowns");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.DailyCooldown)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("daily_cooldown");
            entity.Property(e => e.WorkCooldown)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("work_cooldown");

            entity.HasOne(d => d.User).WithOne(p => p.UserCooldown)
                .HasForeignKey<UserCooldown>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_cooldowns_user_id_fkey");
        });

        modelBuilder.Entity<UserStat>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("user_stats_pkey");

            entity.ToTable("user_stats");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.AllTimeLost)
                .HasColumnType("money")
                .HasColumnName("all_time_lost");
            entity.Property(e => e.AllTimeWon)
                .HasColumnType("money")
                .HasColumnName("all_time_won");
            entity.Property(e => e.BiggestLoss)
                .HasColumnType("money")
                .HasColumnName("biggest_loss");
            entity.Property(e => e.BiggestWin)
                .HasColumnType("money")
                .HasColumnName("biggest_win");
            entity.Property(e => e.CoinFlipLosses)
                .HasPrecision(10)
                .HasColumnName("coin_flip_losses");
            entity.Property(e => e.CoinFlipWins)
                .HasPrecision(10)
                .HasColumnName("coin_flip_wins");
            entity.Property(e => e.DailyCount)
                .HasPrecision(10)
                .HasColumnName("daily_count");
            entity.Property(e => e.DailyStreak)
                .HasPrecision(10)
                .HasColumnName("daily_streak");
            entity.Property(e => e.GuessLosses)
                .HasPrecision(10)
                .HasColumnName("guess_losses");
            entity.Property(e => e.GuessWins)
                .HasPrecision(10)
                .HasColumnName("guess_wins");
            entity.Property(e => e.RideTheBusLosses)
                .HasPrecision(10)
                .HasColumnName("ride_the_bus_losses");
            entity.Property(e => e.RideTheBusWins)
                .HasPrecision(10)
                .HasColumnName("ride_the_bus_wins");
            entity.Property(e => e.WorkCount)
                .HasPrecision(10)
                .HasColumnName("work_count");

            entity.HasOne(d => d.User).WithOne(p => p.UserStat)
                .HasForeignKey<UserStat>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_stats_user_id_fkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}